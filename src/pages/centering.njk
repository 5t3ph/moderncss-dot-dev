---
title: "The Complete Guide to Centering in CSS"
description: "Learn how to finally solve the mystery of centering in CSS using grid, flexbox, and classic block element layout."
permalink: "/complete-guide-to-centering-in-css/"
layout: layouts/demo
date: "2020-05-17"
templateEngineOverride: njk, md
---

<p class="h3 text-align-center color-primary">Get ready to learn how to approach the age old question faced by many a CSS practitioner:<br/> "How do I center a div?"</p>

## Use Cases Covered

1. [Vertically and Horizontally (XY)](#vertically-and-horizontally-xy)
   - [XY Grid Solution](#xy-grid-solution)
   - [XY Flexbox Solution](#xy-flexbox-solution)
   - [XY Alternative Solution](#xy-alternative-solution)
   - [XY Centering for Block Elements](#xy-centering-for-block-elements)
1. [Vertical Centering (Y)](#vertical-centering-y)
   - [Y Grid Solution](#y-grid-solution)
   - [Y Flexbox Solution](#y-flexbox-solution)
   - [Y Centering for Block Elements](#y-centering-for-block-elements)
1. [Horizontal Centering (X)](#horizontal-centering-x)
   - [X Grid Solution](#x-grid-solution)
   - [X Flexbox Solution](#x-flexbox-solution)
   - [X Centering for Block Elements](#x-centering-for-block-elements)
   - [X Centering for Dynamically Positioned Elements](#x-centering-for-dynamically-positioned-elements)

{% carbonAd %}

## Vertically and Horizontally (XY)

The holy grail: vertical and horizontal centering, aka centering along both the `x-axis` and the `y-axis`.

### XY Grid Solution

The _most modern_ and _easiest_ way is with the following **two lines** of CSS:

{% set open = 'open' %}
{% set demoTitle = "XY Grid Solution" %}
{% set css %}
.grid {
	display: grid;
	place-content: center;
	min-height: 20vh;
	color: #222;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
.grid div {
	padding: 0.5rem;
	outline: 2px dashed red;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.grid {
	display: grid;
	place-content: center;
}
{% endset %}
{% set html -%}
<div class="grid">
	<div>I am centered!</div>
</div>

<div class="grid">
	<div>We are centered!</div>
	<div>We are centered!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

#### Gotchas

**Collapse of child grid** using `auto-fit` or `auto-fill`

Given a child grid that uses the following styles:

```css
grid-template-columns: repeat([auto-fit or auto-fill], minmax(10ch, 1fr));
```

The child grid will collapse in on itself, in this case down to the `min` part of `minmax`, due to the `justify-content` set in the `place-content` shorthand.

{% set demoTitle = "auto-fit fixed" %}
{% set css %}
.grid {
	display: grid;
	place-content: center;
	min-height: 20vh;
	color: #222;
}

.grid-autofit {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(10ch, 1fr));
	outline: 2px dashed blue;
}
{% endset %}
{% set cssDisplay %}
.grid-autofit {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(10ch, 1fr));
}
{% endset %}
{% set html -%}
<div class="grid">
	<ul role="list" class="grid-autofit">
		<li>Item 1</li>
		<li>Item 2</li>
		<li>Item 3</li>
	</ul>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

The fix is two-fold: switch the grid centering technique to use `place-items` instead of `place-content`, and then to specifically define that the child grid should be `width: 100%` or whatever you'd prefer as a width value to create space for the grid columns.

{% set demoTitle = "auto-fit collapse" %}
{% set css %}
.grid {
	display: grid;
	place-items: center;
	min-height: 20vh;
	color: #222;
}

.grid-autofit {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(10ch, 1fr));
	width: 80%;
	outline: 2px dashed blue;
}
{% endset %}
{% set cssDisplay %}
.grid {
	display: grid;
	place-items: center;
}

.grid-autofit {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(10ch, 1fr));
	width: 80%;
}
{% endset %}
{% set html -%}
<div class="grid">
	<ul role="list" class="grid-autofit">
		<li>Item 1</li>
		<li>Item 2</li>
		<li>Item 3</li>
	</ul>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

{% newsletterPromo %}

### XY Flexbox Solution

Alternatively, you can use the very slightly more verbose Flexbox version:

{% set demoTitle = "XY Flex Solution" %}
{% set css %}
.flex {
	display: flex;
	align-items: center;
	justify-content: center;
	min-height: 20vh;
	color: #222;
}

.flex div {
	outline: 2px dashed blue;
	padding: 0.5rem;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: flex;
	align-items: center;
	justify-content: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>I am centered!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

#### Gotchas

Flexbox has a slightly different behavior when a second item is added since flex items default to placement along the x-axis:

{% set demoTitle = "XY Flex Gotcha" %}
{% set html -%}
<div class="flex">
	<div>We are centered!</div>
	<div>...Sort of!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

One way to resolve this is by adding `flex-direction: column`:

{% set demoTitle = "XY Flex Gotcha fixed" %}
{% set css %}
.flex {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	min-height: 20vh;
	color: #222;
}
.flex div {
	outline: 2px dashed blue;
	padding: 0.5rem;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>We are centered!</div>
	<div>Hooray!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

Alternatively, wrap the children in a single element, especially if you don't want them to be affected by the outer flexbox alignment.

If a child element uses grid with `auto-fit` or `auto-fill` it will encounter the same issue as when the parent container is grid as described previously.

### XY Alternative Solution

`margin: auto` is unique for flexbox and grid, and in the case you have only one child item, you can do the following for _either_ flex or grid.

{% set demoTitle = "XY Alternative Flexbox Solution" %}
{% set css %}
.flex, .grid {
	min-height: 20vh;
	color: #222;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
.flex {
	display: flex;
}
.grid {
	display: grid;
}
.only-child {
	margin: auto;
	padding: 0.5rem;
	outline: 2px dashed red;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: flex;
}

.grid {
	display: grid;
}

.only-child {
	margin: auto;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div class="only-child">Flex only child centered</div>
</div>
<div class="grid">
	<div class="only-child">Grid only child centered</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

The `auto` behavior for flex children, unlike childfren of block elements, can also be applied vertically which allows this solution to work.

### XY Centering for Block Elements

If you are unable to switch to grid or flexbox layout, here's a _modern_ solution to this classic problem.

Ensure the child elements are wrapped in a containing element for the following to work:

{% set demoTitle = "XY Centering for Block Elements" %}
{% set css %}
.parent {
  position: relative;
	min-height: 20vh;
	color: #222;
}

.child-wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.parent {
  position: relative;
}

.child-wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
{% endset %}
{% set html -%}
<div class="parent">
	<div class="child-wrapper">
		<div>I am centered!</div>
		<div>Me too!</div>
	</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

This combo works because when a percentage value is supplied to a `translate` definition, it based the percentage on the computed width (`translateX`) or height (`translateY`). In this example, we use shorthand to apply both `x` and `y` values to `translate()`.

Absolute positioning takes an element out of normal document flow after which we can apply precise values (as needed) to control its positioning in the document, or in this case, relative to the parent with the required `position: relative` on the parent element.

After absolutely positioning the child from the top 50% and left 50%, which is 50% of the parent's height and width, respectively, we then use `translate(-50%, -50%)` to pull the child back up 50% of its own height and back left 50% of its own width. This results in a centered appearance that scales with the content.

#### Gotchas

Because we've used absolute positioning, there's a chance the content will grow to overflow the parent, even if like in the demo the parent has a `min-width` which typically grows with the content _except_ for absolute children.

The fix for this is: use grid or flexbox :) Or prepare to create #allthemediaqueries.

## Vertical Centering (Y)

Solutions for centering vertically, aka on the `y-axis`.

### Y Grid Solution

We only need one property to vertically align in grid:

{% set demoTitle = "Y Grid Solution" %}
{% set css %}
.grid {
	display: grid;
	align-content: center;
	min-height: 20vh;
	color: #222;
}
.grid div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.grid {
	display: grid;
	align-content: center;
}
{% endset %}
{% set html -%}
<div class="grid">
	<div>I am centered vertically!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

Use of `align-content` is scalable for multiple child elements.

It also works if we switch the default grid axis to `x` with `grid-auto-flow: column`:

{% set demoTitle = "Y Grid Solution for columns" %}
{% set css %}
.grid {
	display: grid;
	align-content: center;
	grid-auto-flow: column;
	min-height: 20vh;
	color: #222;
}
.grid div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.grid {
	display: grid;
	align-content: center;
	grid-auto-flow: column;
}
{% endset %}
{% set html -%}
<div class="grid">
	<div>I am centered vertically!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

### Y Flexbox Solution

Flexbox items can be vertically aligned with:

{% set demoTitle = "Y Flexbox Solution" %}
{% set css %}
.flex {
	display: flex;
	align-items: center;
	min-height: 20vh;
	color: #222;
}
.flex div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: grid;
	align-items: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>I am centered vertically!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

#### Gotchas

If you switch the default axis by adding `flex-direction: column` this solution fails.

{% set demoTitle = "Y Flexbox Gotcha for flex-direction: column" %}
{% set css %}
.flex {
	display: flex;
	align-items: center;
	flex-direction: column;
	min-height: 20vh;
	color: #222;
}
.flex div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: grid;
	flex-direction: column;
	align-items: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>Now I am centered... horizontally?</div>
	<div>Hmm, me too...</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

A huge cuplprit of issues when dealing with flexbox is missing that flipping the default axis flips the associated properties.

For `column`, or `y-axis` flex layout, instead of `align-items` we now need to use:

{% set demoTitle = "Y Flexbox Gotcha fix for flex-direction: column" %}
{% set css %}
.flex {
	display: flex;
	justify-content: center;
	flex-direction: column;
	min-height: 20vh;
	color: #222;
}
.flex div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: grid;
	flex-direction: column;
	justify-content: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>I am centered vertically!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

### Y Centering for Block Elements

If possible, switch the layout model and use flex or grid.

Otherwise, much like the [XY solution](#xy-centering-for-block-elements), we'll use absolute positioning and transform, but only apply to `translateY` to move the child 50% of its height.

{% set demoTitle = "Y Flexbox Gotcha fix for flex-direction: column" %}
{% set css %}
.parent {
	position: relative;
	min-height: 20vh;
	color: #222;
}
.child-wrapper {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.parent {
  position: relative;
}

.child-wrapper {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}
{% endset %}
{% set html -%}
<div class="parent">
	<div class="child-wrapper">
		<div>I am centered vertically!</div>
		<div>Me too!</div>
	</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

See [XY Centering for Block Elements](#xy-centering-for-block-elements) to learn why this works.

## Horizontal Centering (X)

Solutions for centering horizontally, aka on the `x-axis`.

### X Grid Solution

The `justify-` properties are for `x-axis` alignment:

{% set demoTitle = "X Grid Solution" %}
{% set css %}
.grid {
	display: grid;
	justify-content: center;
	min-height: 20vh;
	color: #222;
}
.grid div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.grid {
	display: grid;
	justify-content: center;
}
{% endset %}
{% set html -%}
<div class="grid">
	<div>I am centered horizontally!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

Again, this holds up if we switch the default axis with:

{% set demoTitle = "X Grid Solution for columns" %}
{% set css %}
.grid {
	display: grid;
	justify-content: center;
	grid-auto-flow: column;
	min-height: 20vh;
	color: #222;
}
.grid div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.grid {
	display: grid;
	justify-content: center;
	grid-auto-flow: column;
}
{% endset %}
{% set html -%}
<div class="grid">
	<div>I am centered horizontally!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

### X Flexbox Solution

To center along the `x-axis`, which is the default flexbox axis for child item alignment, use:

{% set demoTitle = "X Flexbox Solution" %}
{% set css %}
.flex {
	display: flex;
	justify-content: center;
	min-height: 20vh;
	color: #222;
}
.flex div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: flex;
	justify-content: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>I am centered horizontally!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

#### Gotchas

At this point, you know what's coming - this will fail for `flex-direction: column`.

We'll fix it by using `align-items` instead of `justify-content`:

{% set demoTitle = "X Flexbox Solution for flex-direction: column" %}
{% set css %}
.flex {
	display: flex;
	flex-direction: column;
	align-items: center;
	min-height: 20vh;
	color: #222;
}
.flex div {
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.flex {
	display: flex;
	flex-direction: column
	align-items: center;
}
{% endset %}
{% set html -%}
<div class="flex">
	<div>I am centered horizontally!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

### X Centering for Block Elements

This is the classic solution of using auto margins, although it must be placed on each element you wish to center individually.

For the demo, I've also set a `width` since by default block elements take up the full-width of their container, which visually opposes the centering.

{% set demoTitle = "X Centering for Block Elements" %}
{% set css %}
.block {
	min-height: 20vh;
	color: #222;
}
.block div {
	margin-left: auto;
	margin-right: auto;
	width: 60%;
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.block div {
	margin-left: auto;
	margin-right: auto;
	width: 60%;
}
{% endset %}
{% set html -%}
<div class="block">
	<div>I am centered horizontally!</div>
	<div>Me too!</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}

### X Centering for Dynamically Positioned Elements

The use case here is for components like [dropdown menus](/css-only-accessible-dropdown-navigation-menu/) or tooltips when there is a requirement for centering of items of dynamic/unknown width relative to the associated trigger.

We'll use a method similar to [Y Centering for Block Elements](#y-centering-for-block-elements), but using `left` and `translateX` properties:

{% set demoTitle = "X Centering for Dynamically Positioned Elements" %}
{% set css %}
.parent {
	position: relative;
	min-height: 20vh;
	color: #222;
}
.child-wrapper {
	position: absolute;
  left: 50%;
  transform: translateX(-50%);
	padding: 0.5rem;
	outline: 2px dashed blue;
	outline-offset: -2px;
}
{% endset %}
{% set cssDisplay %}
.parent {
  position: relative;
}

.child-wrapper {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
{% endset %}
{% set html -%}
<div class="parent">
	<div class="child-wrapper">
		<div>I am centered horizontally!</div>
		<div>Me too!</div>
	</div>
</div>
{% endset %}
{% include "partials/snippet.njk" %}
